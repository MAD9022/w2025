(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{325:function(e,t,a){"use strict";a.r(t);var s=a(10),o=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"assignments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assignments"}},[e._v("#")]),e._v(" Assignments")]),e._v(" "),t("p",[t("strong",[e._v("Table of Contents")])]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"#_1-spa-assignment-part-one"}},[e._v("SPA Assignment - Part One")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#_2-spa-assignment-part-two"}},[e._v("SPA Assignment - Part Two")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#_3-react-app"}},[e._v("React Assignment - React App")])])]),e._v(" "),t("h2",{attrs:{id:"_1-spa-assignment-part-one"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-spa-assignment-part-one"}},[e._v("#")]),e._v(" 1. SPA Assignment - Part One")]),e._v(" "),t("p",[e._v("This first part of the Single Page Application will be focused on the navigation and data caching for a single page with three sections - a home page, a list (users) page, and a details (user) page.")]),e._v(" "),t("p",[e._v("The URLs for the app will be:")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("/#")]),e._v(" for the home screen (or "),t("code",[e._v("/index.html#")]),e._v(")")]),e._v(" "),t("li",[t("code",[e._v("/#users")]),e._v(" for the list screen (or "),t("code",[e._v("/index.html#users")]),e._v(")")]),e._v(" "),t("li",[t("code",[e._v("/#details")]),e._v(" for the details screen (or "),t("code",[e._v("/index.html#details")]),e._v(")")])]),e._v(" "),t("p",[e._v("The index.html file is the only HTML file in the web app.")]),e._v(" "),t("p",[e._v("At the top of every screen is the same navigation bar with links to the home screen and the list screen.")]),e._v(" "),t("p",[e._v("On the home screen there should be a welcome message and a button to refresh the data.")]),e._v(" "),t("p",[e._v("On the list (users) screen, in the second part, we will be creating a list or grid of user cards. In this first part we only need a title plus a few links that sends the user to "),t("code",[e._v("/#details")]),e._v(" and pass the user id through the "),t("code",[e._v("history.state")]),e._v(" object.")]),e._v(" "),t("p",[e._v("On the details (user) screen, in the second part, will we be displaying all the user data. In this first part we only need a title and the user id.")]),e._v(" "),t("p",[e._v("All three screens should, combined with the navbar, fill a minimum of the whole vertical height of the screen.")]),e._v(" "),t("h3",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),t("p",[e._v("The app needs a "),t("code",[e._v("DOMContentLoaded")]),e._v(" listener will call a function that will read the current url, get the hash value and show the appropriate screen:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("#")]),e._v(" or null: will show to the home screen")]),e._v(" "),t("li",[t("code",[e._v("#users")]),e._v(": will show the list screen")]),e._v(" "),t("li",[t("code",[e._v("#details")]),e._v(": will show the details screen")]),e._v(" "),t("li",[e._v("any other hash value needs to trigger a call to "),t("code",[e._v("replaceState")]),e._v(" to rewrite the hash value as "),t("code",[e._v("#")]),e._v(" and then show the home screen.")])]),e._v(" "),t("p",[e._v("The app needs a "),t("code",[e._v("popstate")]),e._v(" listener that will handle the forward and back buttons and call a function to show the appropriate screen.")]),e._v(" "),t("p",[e._v("All three events should call the same function to change the UI display and show the appropriate screen.")]),e._v(" "),t("p",[e._v("The button on the home screen needs a "),t("code",[e._v("click")]),e._v(" listener, which will make a fetch call to "),t("code",[e._v("https://random-data-api.com/api/v2/users?size=12")]),e._v(". If the fetch call returns a valid response, then save it with the "),t("strong",[e._v("Cache")]),e._v(" API. Use the URL for the fetch as the request for the cache.")]),e._v(" "),t("p",[t("strong",[e._v("Git Commits:")]),e._v(" There should be at least 5 commits in your repo.")]),e._v(" "),t("YouTube",{attrs:{title:"assign one demo",url:"https://www.youtube.com/embed/ScYEUBBuH2Q"}}),e._v(" "),t("h3",{attrs:{id:"submission"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#submission"}},[e._v("#")]),e._v(" Submission")]),e._v(" "),t("p",[e._v("Invite your professor - "),t("code",[e._v("prof3ssorSt3v3")]),e._v(" to be a collaborator on your private repo.")]),e._v(" "),t("p",[e._v("Submit the URL of your private repo to the "),t("code",[e._v("SPA Assignment Part 1")]),e._v(" in BS LMS.")]),e._v(" "),t("p",[e._v("Due Week 3 - See BS LMS for the due date and time.")]),e._v(" "),t("h2",{attrs:{id:"_2-spa-assignment-part-two"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-spa-assignment-part-two"}},[e._v("#")]),e._v(" 2. SPA Assignment - Part Two")]),e._v(" "),t("p",[e._v("The premise for the site could be something like an admin site to view all the current users on the site and their details.")]),e._v(" "),t("p",[e._v("The second part of the SPA is adding the content from the data to the users list screen each time the user navigates to it. Each user card should be wrapped in an anchor tag that navigates to "),t("code",[e._v("#details")]),e._v(". The uuid from the user should be added to the querystring in the anchor tag href attribute. When the querystring changes, the page will reload.")]),e._v(" "),t("p",[e._v("As an alternative to the querystring and reloading of the page, you may use a click listener on the user card, call the "),t("code",[e._v("pushState")]),e._v(" method and pass the user id value through the "),t("code",[e._v("state")]),e._v(" object being passed to "),t("code",[e._v("pushState")]),e._v('. This will require you to also call the function to "navigate" to the details screen. By "navigate" we mean to hide the '),t("code",[e._v("#users")]),e._v(" screen and show the "),t("code",[e._v("#details")]),e._v(" screen.")]),e._v(" "),t("p",[e._v("When the page loads, check the "),t("strong",[e._v("Cache")]),e._v(" for the users json file, and load that into a global variable. If the data is not in the Cache when the page loads, then the #users screen should display a message about there being no users currently and a button, just like the one on the home screen to load latest users.")]),e._v(" "),t("p",[e._v("On the "),t("code",[e._v("#users")]),e._v(" screen, display a responsive list or grid of cards. One card for each of the dozen users. Each card should display the "),t("code",[e._v("first_name")]),e._v(", "),t("code",[e._v("last_name")]),e._v(", "),t("code",[e._v("username")]),e._v(", "),t("code",[e._v("email")]),e._v(", and "),t("code",[e._v("avatar")]),e._v(" of each user.")]),e._v(" "),t("p",[e._v("When the "),t("code",[e._v("#users")]),e._v(" screen loads, check in the cache for user data, retrieve the json data from the cache, save the user array in a global variable, and build the user cards. Each user card needs to be wrapped in an anchor tag that is linked to the "),t("code",[e._v("#details")]),e._v(" screen with a URL that looks like: "),t("code",[e._v("index.html?uid=asdf-23423-sdfsd-asdf#details")]),e._v(". The hash value is the page to display. The querystring is the id of the user to retrieve from the user array that was retrieved from the cache. "),t("strong",[e._v("Or")]),e._v(", as previously mentioned, you can use the "),t("code",[e._v("pushState")]),e._v(" method combined with the "),t("code",[e._v("history.state")]),e._v(" property to pass the user id from "),t("code",[e._v("#users")]),e._v(" to "),t("code",[e._v("#details")]),e._v(".")]),e._v(" "),t("p",[e._v("If there is NO user data in the Cache, or the user is clicking one of the buttons to load new data, then the sequence will be slightly different.")]),e._v(" "),t("blockquote",[t("p",[e._v("Fetch -> clone response -> one response into the cache -> one response uses .json() to get array of users")])]),e._v(" "),t("p",[e._v("Once you have the user data from the cache/fetch, then you need to make sure that you're URL is "),t("code",[e._v("#users")]),e._v(" and display the user cards.")]),e._v(" "),t("p",[e._v("If there is user data in the cache, then all you need to do is read the data and build the cards when the user navigates to "),t("code",[e._v("#users")]),e._v(".")]),e._v(" "),t("p",[e._v("On the home screen, when the user hits the button to fetch new user data you will be replacing the data in the cache with the new response. You will also need to send the user to the "),t("code",[e._v("#users")]),e._v(" screen. This will require calling "),t("code",[e._v("pushState")]),e._v(" to change the location and save it to the history stack, and then calling your function to update the UI and displayed screen.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("#details")]),e._v(" screen needs to display all the information from the user card plus "),t("strong",[e._v("at least 5 other fields")]),e._v(" from the user data.")]),e._v(" "),t("p",[e._v("The button for updating the user list by calling fetch and saving the response to the Cache is always available on the home screen. On the "),t("code",[e._v("#users")]),e._v(" screen the button only appears when there is no data.")]),e._v(" "),t("p",[t("strong",[e._v("Avatar Images")]),e._v(" You should have a default image to use for user avatars in case the real avatar is missing or slow to load.")]),e._v(" "),t("p",[t("strong",[e._v("Google Font:")]),e._v(" You should use at least one Google font for your SPA. Include the 2 preconnect links and one css link in your HTML.")]),e._v(" "),t("p",[t("strong",[e._v("Content-Security-Policy:")]),e._v(" You should have a CSP meta tag in the head that limits the sources for all the files.")]),e._v(" "),t("p",[t("strong",[e._v("Git Commits:")]),e._v(" There should be at least 5 commits in your repo.")]),e._v(" "),t("YouTube",{attrs:{title:"SPA Assignment: part 2 - demo",url:"https://youtube.com/embed/HSse1apGTIY"}}),e._v(" "),t("h3",{attrs:{id:"extra-features"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extra-features"}},[e._v("#")]),e._v(" Extra Features")]),e._v(" "),t("p",[e._v("Some other features that are not required for grades, but that give you something that you can do to enhance your application for a portfolio and for your own learning and practice.")]),e._v(" "),t("ul",[t("li",[e._v("Add a delete button on the "),t("code",[e._v("#details")]),e._v(" screen that will remove the user object from the user array, and then create a new File + Response using that updated data. Then the response needs to be saved inside the Cache to replace the existing response.")]),e._v(" "),t("li",[e._v("Add a service worker that will cache all the HTML, CSS, JS, JSON, and font files. In this way the app can still work if offline. You will need to make an initial request for the user data when the SPA first loads, and is online. The buttons for fetching new users need to be made "),t("code",[e._v("disabled")]),e._v(" when the page is offline. Listen for the "),t("code",[e._v("offline")]),e._v(" event to achieve this.")])]),e._v(" "),t("h3",{attrs:{id:"submission-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#submission-2"}},[e._v("#")]),e._v(" Submission")]),e._v(" "),t("p",[e._v("Invite your professor - "),t("code",[e._v("prof3ssorSt3v3")]),e._v(" to be a collaborator on your private repo.")]),e._v(" "),t("p",[e._v("Submit the URL of your private repo to the "),t("code",[e._v("SPA Assignment Part 2")]),e._v(" in BS LMS.")]),e._v(" "),t("p",[e._v("Also submit the github.io link for the Github Pages version.")]),e._v(" "),t("p",[t("strong",[e._v("Remember to test your deployed version on Github Pages to make sure the SPA loads and runs there")])]),e._v(" "),t("p",[e._v("Due Week 5 - See BS LMS for the due date and time.")]),e._v(" "),t("h2",{attrs:{id:"_3-react-app"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-app"}},[e._v("#")]),e._v(" 3. React App")]),e._v(" "),t("p",[e._v("This app will demonstrate core features and capabilities of a Single Page Application built with React. You will use The Movie Database API to search for Actors and display their name, portrait image, and a list of the movies and TV shows that they have starred in.")]),e._v(" "),t("p",[e._v("There needs to be a state variable for the keyword being searched, another state variable for the results array of the search, plus a state variable for the loading status, and a state variable for errors on data fetching.")]),e._v(" "),t("p",[e._v("The initial home screen with a search form, and instructions for what the user should do, will be displayed if the search keyword is empty.")]),e._v(" "),t("p",[e._v("If there is a search keyword that is not null or empty string, then the app should do a fetch to find an array of results. If the state variable results array is null then the home screen should show because the search is not complete. If the array is empty then a message about there being no results should appear. While the search is running, a spinner should be shown. Use the loading status state variable to control the appearance of the spinner. Once there is data in the results array, then display a Person Card for each item in the results. If the error state variable is holding an Error object, then a message to the user about the failure should be shown. The error message will be set when the fetch fails.")]),e._v(" "),t("p",[t("code",[e._v("useState")]),e._v(" and "),t("code",[e._v("useEffect")]),e._v(" will be used to manage the results array.")]),e._v(" "),t("p",[e._v("Create a separate function for doing the fetch call that can be called from multiple places in the code.")]),e._v(" "),t("p",[e._v("The fetch call will use the endpoint "),t("code",[e._v("https://api.themoviedb.org/3/search/person")]),e._v(". It must use the "),t("code",[e._v("Authorization")]),e._v(" header with the "),t("code",[e._v("token")]),e._v(" from your API account. "),t("a",{attrs:{href:"https://developer.themoviedb.org/reference/search-person",target:"_blank",rel:"noopener noreferrer"}},[e._v("Here is the reference for the person search"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("In the results that come back from the API, for each Person, you will need to use the "),t("code",[e._v("id")]),e._v(", "),t("code",[e._v("name")]),e._v(", and "),t("code",[e._v("profile_path")]),e._v(" fields. Additionally, inside the "),t("code",[e._v("known_for")]),e._v(" property will be an array of movie or show objects. The movies will each have a "),t("code",[e._v("title")]),e._v(" property. The shows will each have a "),t("code",[e._v("name")]),e._v(" property. Your person cards will each need to display a default image if profile_path is null. They will need to figure out if they should use the "),t("code",[e._v("known_for.title")]),e._v(" or the "),t("code",[e._v("known_for.name")]),e._v(" field.")]),e._v(" "),t("p",[e._v("The website needs to use a responsive design. For narrow displays, show a single column of cards. For wider displays, show horizontal List Tile type cards.")]),e._v(" "),t("p",[e._v("In the project create a "),t("code",[e._v("components")]),e._v(" folder and create components for at least:")]),e._v(" "),t("ul",[t("li",[e._v("Person card")]),e._v(" "),t("li",[e._v("Search form")]),e._v(" "),t("li",[e._v("Error message display")]),e._v(" "),t("li",[e._v("Header")])]),e._v(" "),t("p",[e._v("Each of the components should have a "),t("code",[e._v("module.css")]),e._v(" file of their own.")]),e._v(" "),t("p",[e._v("You can use one or more global CSS files. "),t("strong",[e._v("NO")]),e._v(" UI kits or libraries are to be used.")]),e._v(" "),t("p",[e._v("You need to have a color scheme defined in the global CSS with CSS variables. All colors in the CSS should use these variables. NO INLINE STYLES. Use ClassNames for all CSS.")]),e._v(" "),t("p",[e._v("The head should include:")]),e._v(" "),t("ul",[t("li",[e._v("A custom shortcut icon link tag")]),e._v(" "),t("li",[e._v("A CSP meta tag")]),e._v(" "),t("li",[e._v("The preconnects and link tags for a Google font to be used in the global CSS.")])]),e._v(" "),t("h3",{attrs:{id:"demo-video"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-video"}},[e._v("#")]),e._v(" Demo Video")]),e._v(" "),t("YouTube",{attrs:{title:"demo for React SPA",url:"https://youtube.com/embed/tDP88DgaO74"}}),e._v(" "),t("h3",{attrs:{id:"submission-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#submission-3"}},[e._v("#")]),e._v(" Submission")]),e._v(" "),t("p",[e._v("Create a private Github Repo to hold your project.")]),e._v(" "),t("p",[e._v("Make sure you have at least 8 commits to the project.")]),e._v(" "),t("p",[e._v("Connect your Vercel account to the repo and display the production version of the project through Vercel. Vercel will need to run the build command and select the "),t("code",[e._v("dist")]),e._v(" folder for the app.")]),e._v(" "),t("p",[e._v("The API key should be set as an ENV variable in Vercel.")]),e._v(" "),t("p",[e._v("Test your app early and often on Vercel.")]),e._v(" "),t("p",[e._v("Submit the Github.com URL for your repo on BS LMS. Invite "),t("code",[e._v("prof3ssorSt3v3")]),e._v(" to the repo. Submit the Vercel public URL (not the developer one) on BS LMS.")]),e._v(" "),t("p",[e._v("Due Week 12 - See BS LMS for the due date and time.")])],1)}),[],!1,null,null,null);t.default=o.exports}}]);